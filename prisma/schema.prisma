generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum Rol {
  USER
  ADMIN
}

model User {
  id        String    @id @default(uuid())
  nombre    String
  apellido  String
  dni       String?   @unique
  fecha_nac DateTime?
  email     String    @unique
  password  String
  telefono  String?
  direccion String?
  imagen    String?
  rol       Rol       @default(USER)
  paciente  Paciente?
  medico    Medico?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Paciente {
  id_paciente String   @id @default(uuid())
  obra_social Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ordenes        Orden[]
  Consulta       Consulta[]
  TurnoReservado TurnoReservado[]
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String           @unique
}

model Medico {
  id_medico      String           @id @default(uuid())
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String           @unique
  sueldo         Float
  especialidad   Servicio         @relation(fields: [especialidadId], references: [codigo_servicio], onDelete: Cascade)
  especialidadId String
  turnos         Turno[]
  Consulta       Consulta[]
  TurnoReservado TurnoReservado[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Servicio {
  id              String            @id @default(uuid())
  codigo_servicio String            @unique
  nombre          String
  descripcion     String
  precio          Float
  imagen          String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  PaqueteServicio PaqueteServicio[]
  Consulta        Consulta[]
  medicos         Medico[]
}

model PaqueteServicio {
  id         String   @id @default(uuid())
  paqueteId  String
  servicioId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  paquete    Paquete  @relation(fields: [paqueteId], references: [codigo_paquete], onDelete: Cascade)
  servicio   Servicio @relation(fields: [servicioId], references: [codigo_servicio])
}

model Paquete {
  id                  String            @id @default(uuid())
  codigo_paquete      String            @unique
  nombre              String
  imagen              String?
  precio_paquete      Float             @default(0)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  servicios_incluidos PaqueteServicio[]
  Consulta            Consulta[]
}

model Consulta {
  id             String   @id @default(uuid())
  fecha_consulta DateTime
  hora_consulta  String

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  turnosReservados TurnoReservado[]
  paciente         Paciente         @relation(fields: [pacienteId], references: [id_paciente], onDelete: Cascade)
  pacienteId       String
  medico           Medico           @relation(fields: [medicoId], references: [id_medico], onDelete: Cascade)
  medicoId         String
  servicio         Servicio?        @relation(fields: [servicioId], references: [codigo_servicio], onDelete: Cascade)
  servicioId       String?
  paquete          Paquete?         @relation(fields: [paqueteId], references: [codigo_paquete], onDelete: Cascade)
  paqueteId        String?
  orden            Orden            @relation(fields: [ordenId], references: [id], onDelete: Cascade)
  ordenId          String
}

model Turno {
  id_turno       String           @id @default(cuid())
  dia_semana     String
  hora_inicio    String
  hora_fin       String
  medicoId       String
  TurnoReservado TurnoReservado[]

  medico Medico @relation(fields: [medicoId], references: [id_medico], onDelete: Cascade)
}

model TurnoReservado {
  id_reserva  String   @id @default(cuid())
  fecha_turno DateTime
  hora_turno  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  medico     Medico   @relation(fields: [medicoId], references: [id_medico], onDelete: Cascade)
  medicoId   String
  paciente   Paciente @relation(fields: [pacienteId], references: [id_paciente], onDelete: Cascade)
  pacienteId String
  turno      Turno    @relation(fields: [turnoId], references: [id_turno], onDelete: Cascade)
  turnoId    String

  consulta   Consulta @relation(fields: [consultaId], references: [id], onDelete: Cascade)
  consultaId String
}

model Orden {
  id          String     @id @default(uuid())
  pagado      Boolean    @default(false)
  monto_total Float
  paciente    Paciente   @relation(fields: [pacienteId], references: [id_paciente], onDelete: Cascade)
  pacienteId  String
  consultas   Consulta[]

  transactionId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
